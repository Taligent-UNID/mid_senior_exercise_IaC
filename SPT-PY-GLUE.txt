#SCRIPT PY PARA GLUE - VENTAS

import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job

args = getResolvedOptions(sys.argv, ["JOB_NAME"])
sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args["JOB_NAME"], args)

# Script generated for node S3 bucket
S3bucket_node1 = glueContext.create_dynamic_frame.from_options(
    format_options={
        "quoteChar": '"',
        "withHeader": False,
        "separator": ";",
        "optimizePerformance": False,
    },
    connection_type="s3",
    format="csv",
    connection_options={
        "paths": ["s3://challenge-aws-iac-target-dms-floki/ta/Ventas/LOAD00000001.csv"],
        "recurse": True,
    },
    transformation_ctx="S3bucket_node1",
)

# Script generated for node ApplyMapping
ApplyMapping_node2 = ApplyMapping.apply(
    frame=S3bucket_node1,
    mappings=[
        ("col1", "string", "NroFactura", "int"),
        ("col2", "string", "FechaFactura", "string"),
        ("col3", "string", "Cliente", "string"),
        ("col4", "string", "MontoSinImp", "string"),
        ("col5", "string", "Impuestos", "string"),
        ("col6", "string", "MontoFactura", "string"),
    ],
    transformation_ctx="ApplyMapping_node2",
)

# Script generated for node S3 bucket
S3bucket_node3 = glueContext.write_dynamic_frame.from_options(
    frame=ApplyMapping_node2,
    connection_type="s3",
    format_options={
        "withHeader": False,
        "separator": ";",
        "quoteChar": -1,
        "optimizePerformance": False,
        },
    format="csv",
    connection_options={
        "path": "s3://challenge-aws-iac-target-glue-floki/Ventas/",
        "partitionKeys": [],
    },
    transformation_ctx="S3bucket_node3",
)

job.commit()


#SCRIPT PY PARA GLUE - CLIENTES

import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job

args = getResolvedOptions(sys.argv, ["JOB_NAME"])
sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args["JOB_NAME"], args)

# Script generated for node S3 bucket
S3bucket_node1 = glueContext.create_dynamic_frame.from_options(
    format_options={
        "withHeader": False,
        "separator": ";",
        "optimizePerformance": False,
    },
    connection_type="s3",
    format="csv",
    connection_options={
        "paths": [
            "s3://challenge-aws-iac-target-dms-floki/db/Clientes/LOAD00000001.csv"
        ],
        "recurse": True,
    },
    transformation_ctx="S3bucket_node1",
)

# Script generated for node ApplyMapping
ApplyMapping_node2 = ApplyMapping.apply(
    frame=S3bucket_node1,
    mappings=[
        ("col0", "string", "ID", "int"),
        ("col1", "string", "Cliente", "varchar"),
        ("col2", "string", "Tipo", "string"),
        ("col3", "string", "Telefono", "string"),
        ("col4", "string", "Ubicacion", "string"),
    ],
    transformation_ctx="ApplyMapping_node2",
)

# Script generated for node S3 bucket
S3bucket_node3 = glueContext.write_dynamic_frame.from_options(
    frame=ApplyMapping_node2,
    connection_type="s3",
    format_options={
        "withHeader": False,
        "separator": ";",
        "quoteChar": -1,
        "optimizePerformance": False,
    },
    format="csv",
    connection_options={
        "path": "s3://challenge-aws-iac-target-glue-floki/Clientes/",
        "partitionKeys": [],
    },
    transformation_ctx="S3bucket_node3",
)

job.commit()
